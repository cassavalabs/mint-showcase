/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ExchangeBuyNowInterface extends utils.Interface {
  functions: {
    "buy(address,uint256,uint256,uint256,address)": FunctionFragment;
    "cancelBuyPrice(address,uint256,uint256)": FunctionFragment;
    "defaultTreasury()": FunctionFragment;
    "getBuyNowPrice(address,uint256)": FunctionFragment;
    "getWtfuelAddress()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "rolesManager()": FunctionFragment;
    "setBuyPrice(address,uint256,uint256,uint256)": FunctionFragment;
    "setDefaultTreasury(address)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "setTokenTreasury(address,address)": FunctionFragment;
    "treasuries(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buy"
      | "cancelBuyPrice"
      | "defaultTreasury"
      | "getBuyNowPrice"
      | "getWtfuelAddress"
      | "protocolFee"
      | "rolesManager"
      | "setBuyPrice"
      | "setDefaultTreasury"
      | "setProtocolFee"
      | "setTokenTreasury"
      | "treasuries"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBuyPrice",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyNowPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWtfuelAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rolesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuyPrice",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultTreasury",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenTreasury",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "treasuries", values: [string]): string;

  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyNowPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWtfuelAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rolesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasuries", data: BytesLike): Result;

  events: {
    "BuyPriceAccepted(address,uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "BuyPriceCanceled(address,uint256)": EventFragment;
    "BuyPriceInvalidated(address,uint256)": EventFragment;
    "BuyPriceSet(address,uint256,address,uint256)": EventFragment;
    "TransferProxyUpdated(string,address)": EventFragment;
    "TransferToWTfuelExchange(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyPriceAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPriceCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPriceInvalidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuyPriceSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferProxyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferToWTfuelExchange"): EventFragment;
}

export interface BuyPriceAcceptedEventObject {
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  buyer: string;
  protocolFee: BigNumber;
  royaltyFeeAmount: BigNumber;
  ownerRevenue: BigNumber;
}
export type BuyPriceAcceptedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  BuyPriceAcceptedEventObject
>;

export type BuyPriceAcceptedEventFilter =
  TypedEventFilter<BuyPriceAcceptedEvent>;

export interface BuyPriceCanceledEventObject {
  nftContract: string;
  tokenId: BigNumber;
}
export type BuyPriceCanceledEvent = TypedEvent<
  [string, BigNumber],
  BuyPriceCanceledEventObject
>;

export type BuyPriceCanceledEventFilter =
  TypedEventFilter<BuyPriceCanceledEvent>;

export interface BuyPriceInvalidatedEventObject {
  nftContract: string;
  tokenId: BigNumber;
}
export type BuyPriceInvalidatedEvent = TypedEvent<
  [string, BigNumber],
  BuyPriceInvalidatedEventObject
>;

export type BuyPriceInvalidatedEventFilter =
  TypedEventFilter<BuyPriceInvalidatedEvent>;

export interface BuyPriceSetEventObject {
  nftContract: string;
  tokenId: BigNumber;
  seller: string;
  price: BigNumber;
}
export type BuyPriceSetEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  BuyPriceSetEventObject
>;

export type BuyPriceSetEventFilter = TypedEventFilter<BuyPriceSetEvent>;

export interface TransferProxyUpdatedEventObject {
  assetType: string;
  proxy: string;
}
export type TransferProxyUpdatedEvent = TypedEvent<
  [string, string],
  TransferProxyUpdatedEventObject
>;

export type TransferProxyUpdatedEventFilter =
  TypedEventFilter<TransferProxyUpdatedEvent>;

export interface TransferToWTfuelExchangeEventObject {
  user: string;
  amount: BigNumber;
}
export type TransferToWTfuelExchangeEvent = TypedEvent<
  [string, BigNumber],
  TransferToWTfuelExchangeEventObject
>;

export type TransferToWTfuelExchangeEventFilter =
  TypedEventFilter<TransferToWTfuelExchangeEvent>;

export interface ExchangeBuyNow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeBuyNowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buy(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultTreasury(overrides?: CallOverrides): Promise<[string]>;

    getBuyNowPrice(
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; salePrice: BigNumber }>;

    getWtfuelAddress(
      overrides?: CallOverrides
    ): Promise<[string] & { wtfuelAddress: string }>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rolesManager(overrides?: CallOverrides): Promise<[string]>;

    setBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultTreasury(
      _defaultTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenTreasury(
      token: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuries(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  buy(
    nftContract: string,
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    quantity: BigNumberish,
    paymentToken: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBuyPrice(
    nftContract: string,
    tokenId: BigNumberish,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultTreasury(overrides?: CallOverrides): Promise<string>;

  getBuyNowPrice(
    nftContract: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { seller: string; salePrice: BigNumber }>;

  getWtfuelAddress(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  rolesManager(overrides?: CallOverrides): Promise<string>;

  setBuyPrice(
    nftContract: string,
    tokenId: BigNumberish,
    salePrice: BigNumberish,
    quantity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultTreasury(
    _defaultTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenTreasury(
    token: string,
    _treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuries(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    buy(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      paymentToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultTreasury(overrides?: CallOverrides): Promise<string>;

    getBuyNowPrice(
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { seller: string; salePrice: BigNumber }>;

    getWtfuelAddress(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    rolesManager(overrides?: CallOverrides): Promise<string>;

    setBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultTreasury(
      _defaultTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenTreasury(
      token: string,
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuries(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BuyPriceAccepted(address,uint256,address,address,uint256,uint256,uint256)"(
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      buyer?: null,
      protocolFee?: null,
      royaltyFeeAmount?: null,
      ownerRevenue?: null
    ): BuyPriceAcceptedEventFilter;
    BuyPriceAccepted(
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      buyer?: null,
      protocolFee?: null,
      royaltyFeeAmount?: null,
      ownerRevenue?: null
    ): BuyPriceAcceptedEventFilter;

    "BuyPriceCanceled(address,uint256)"(
      nftContract?: string | null,
      tokenId?: BigNumberish | null
    ): BuyPriceCanceledEventFilter;
    BuyPriceCanceled(
      nftContract?: string | null,
      tokenId?: BigNumberish | null
    ): BuyPriceCanceledEventFilter;

    "BuyPriceInvalidated(address,uint256)"(
      nftContract?: string | null,
      tokenId?: BigNumberish | null
    ): BuyPriceInvalidatedEventFilter;
    BuyPriceInvalidated(
      nftContract?: string | null,
      tokenId?: BigNumberish | null
    ): BuyPriceInvalidatedEventFilter;

    "BuyPriceSet(address,uint256,address,uint256)"(
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      price?: null
    ): BuyPriceSetEventFilter;
    BuyPriceSet(
      nftContract?: string | null,
      tokenId?: BigNumberish | null,
      seller?: string | null,
      price?: null
    ): BuyPriceSetEventFilter;

    "TransferProxyUpdated(string,address)"(
      assetType?: null,
      proxy?: null
    ): TransferProxyUpdatedEventFilter;
    TransferProxyUpdated(
      assetType?: null,
      proxy?: null
    ): TransferProxyUpdatedEventFilter;

    "TransferToWTfuelExchange(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TransferToWTfuelExchangeEventFilter;
    TransferToWTfuelExchange(
      user?: string | null,
      amount?: null
    ): TransferToWTfuelExchangeEventFilter;
  };

  estimateGas: {
    buy(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    getBuyNowPrice(
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWtfuelAddress(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    rolesManager(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultTreasury(
      _defaultTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenTreasury(
      token: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuries(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buy(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBuyNowPrice(
      nftContract: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWtfuelAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rolesManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuyPrice(
      nftContract: string,
      tokenId: BigNumberish,
      salePrice: BigNumberish,
      quantity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultTreasury(
      _defaultTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenTreasury(
      token: string,
      _treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
